package com.evolent.validation;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

import com.evolent.dao.User;

public class UserValidator implements Validator {

	public boolean supports(Class<?> clazz) {
		return User.class.isAssignableFrom(clazz);
	}

	public void validate(Object target, Errors errors) {	
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "firstName", "firstName.required","* First name is required.");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "lastName", "lastName.required", "* Last name is required.");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "email", "email.required", "* Email is required.");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "phoneNumber", "phoneNumber.required","* Phone number is required.");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "status", "status.required", "* Status is required.");
		User user = (User) target;
		System.out.println(user.getPhoneNumber());
		
		String regex = "^(.+)@(.+)$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(user.getEmail());
		System.out.println(user.getEmail());
		
		if(){
			
		} else if (!matcher.matches()) {
			errors.rejectValue("email","email.required", "Invalid Email");
		}
		
		if (user.getPhoneNumber() < 5) {
			errors.rejectValue("phoneNumber","phoneNumber.length", "Phone Number should be greater than 5");
		}
		
/*
		if (book.getDescription().length() < 10 || book.getDescription().length() > 40) {
			errors.rejectValue("description", "description.length",
					"Please enter description within 40 charaters only");
		}

		if (book.getISBN() <= 150l) {
			errors.rejectValue("ISBN", "ISBN.required", "Please Enter Correct ISBN number");
		}*/
	}
	
	/*public void validateEmail(String email, Long id, Errors errors) {
		String cleanEmail = StringUtils.trimToEmpty(email);
		if (StringUtils.isBlank(cleanEmail)) {
			errors.rejectValue("email", "validation.error.email.blank");
		} else {
			manager.findByEmail(cleanEmail).filter(user -> !user.getId().equals(id)).ifPresent(user -> errors.rejectValue("email", "validation.error.email.inUse"));
		}
	}*/

}
