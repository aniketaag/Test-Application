package com.evolent.controllers;

import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.evolent.dao.User;
import com.evolent.service.UserServiceImpl;
import com.evolent.validation.UserValidator;

@Controller
public class UserController {

	private static final Logger logger = Logger.getLogger(WelcomeController.class);
	
	@Autowired
	UserValidator userValidator;
	
	@Autowired
	UserServiceImpl userServiceImpl;
	
	@InitBinder
	private void initBinder(WebDataBinder binder) {
		binder.setValidator(userValidator);
	}

	@RequestMapping(value = "/home", method = RequestMethod.GET)
	public String listUsers(Model model) {
		List<User> users = userServiceImpl.getAllUsers();
		model.addAttribute("users", users);
		return "user_list";
	}

	@RequestMapping(value = "/adduser", method = RequestMethod.GET)
	public String createUser(Model model) {
		model.addAttribute("user", new User());
		return "index";
	}
	
	@RequestMapping(value = "/edituser/{id}", method = RequestMethod.GET)
	public String editUser(@PathVariable("id") int id,RedirectAttributes attributes, Model model) {
		User user = null;
		try{
			user = userServiceImpl.getUser(id);
			model.addAttribute("user", user);
		}catch(DataAccessException de){
			if(null == user){
				 attributes.addFlashAttribute("message", "User not exist!");
				return "redirect:/home";
			}	
		}
		return "edit_user";
	}

	@RequestMapping(value = "/submitForm", method = RequestMethod.POST)
	public String submitForm(@ModelAttribute("user") User user, @Validated User validateduser,RedirectAttributes attributes, BindingResult bindingResult, Model model) {
		if (bindingResult.hasErrors()) {
	         return "index";
	      }
		userServiceImpl.addUser(user);
		attributes.addFlashAttribute("message", "User created successfully.");
		return "redirect:/home";
	}
	
	@RequestMapping(value = "/updateForm", method = RequestMethod.POST)
	public String UpdateForm(@ModelAttribute("user") User user, @Validated User validateduser,RedirectAttributes attributes, BindingResult bindingResult, Model model) {
		if (bindingResult.hasErrors()) {
	         return "edit_user";
	      }
		userServiceImpl.updateUser(user);
		attributes.addFlashAttribute("message", "User updated successfully");
		return "redirect:/home";
	}
	
	@RequestMapping(value = "/deleteuser/{id}", method = RequestMethod.GET)
	public String deleteUser(@PathVariable("id") int id,RedirectAttributes attributes, Model model) {
		try{
			userServiceImpl.deleteUser(id);
			attributes.addFlashAttribute("message", "User deleted!");
		}catch(DataAccessException de){
			attributes.addFlashAttribute("message", de);
		}	
		return "redirect:/home";
	}
}
